Passphrase-Protecting Symmetric Keys
25 April 2013

Kyle Isom
Hacker at Large
https://plus.google.com/107650668295010639306/
@kyleisom
http://kyleisom.net

* Introduction

- Monthly series on [[https://leanpub.com/gocrypto/][_Practical_Cryptography_with_Go_]]
- Looking for code reviewers for the book's example code

*Today*
- Cryptographic Hashes
- Key Derivation Functions
- Practical: Building a passphrase-protected file encryptor


* Cryptographic Hashes

* The What and Why

- Generically, a hash is  way to transform some input to a fixed-size output.
- To be cryptographically secure, it has to be one way and unique.
- The Secure Hashing Algorithm is the standard crypto hashing library.

*Secure*Hashing*Algorithm* *output*sizes*

.html 2013-04-25/sha.html

We'll use SHA-512 in this talk.

* Hashing a Byte Slice

.code 2013-04-25/hash.go 

[[http://play.golang.org/p/lc3Ae5tIgi]]

* Hashing an io.Reader

- All `crypto.Hash` types support `New`, `Write`, and `Sum`.
- Hash is updated as data is written to it.
- `Sum(nil)` returns the current hash value.

- Keep reading chunks of data and writing them to the hash value until EOF.
- Return the `Sum(nil)`

[[http://play.golang.org/p/8eJry66acw]]

